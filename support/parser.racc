class GQL::Parser
token STRING NUMBER TRUE FALSE NULL AS IDENT
rule
  query
    : variables root variables    {  result = Query.new(val[1], val[0].merge(val[2]))  }
    ;

  root
    : call                  {  result = Root.new(val[0], nil   )  }
    | '{' field_list '}'    {  result = Root.new(nil,    val[1])  }
    ;

  call
    : identifier arguments fields       {   result = Call.new(val[0], val[1], nil,    val[2].presence)   }
    | identifier arguments '.' call     {   result = Call.new(val[0], val[1], val[3], nil            )   }
    | identifier arguments              {   result = Call.new(val[0], val[1], nil,    nil            )   }
    ;

  arguments
    : /* empty */               {   result = []       }
    | '(' ')'                   {   result = []       }
    | '(' argument_list ')'     {   result = val[1]   }
    ;

  argument_list
    : argument_list ',' argument    {   result.push val[2]    }
    | argument                      {   result = val          }
    ;

  argument
    : variable_identifier
    | json_value
    ;

  fields
    : '{' '}'                 {   result = []       }
    | '{' field_list '}'      {   result = val[1]   }
    ;

  field_list
    : field_list ',' field    {   result.push val[2]    }
    | field                   {   result = val          }
    ;

  field
    : identifier fields alias_identifier      {   result = Node.new(val[0], val[2], nil,    val[1].presence)   }
    | identifier alias_identifier fields      {   result = Node.new(val[0], val[1], nil,    val[2].presence)   }
    | identifier '.' call alias_identifier    {   result = Node.new(val[0], val[3], val[2], nil            )   }
    | identifier alias_identifier             {   result = Node.new(val[0], val[1], nil,    nil            )   }
    | identifier fields                       {   result = Node.new(val[0], nil,    nil,    val[1].presence)   }
    | identifier '.' call                     {   result = Node.new(val[0], nil,    val[2], nil            )   }
    | identifier                              {   result = Node.new(val[0], nil,    nil,    nil            )   }
    ;

  alias_identifier
    : AS identifier             {   result = val[1]   }
    ;

  variables
    : /* empty */               {   result = {}   }
    | variable_list
    ;

  variable_list
    : variable
    | variable_list variable    {   result.update val[1]    }
    ;

  variable
    : variable_identifier '=' variable_value    {   result = { val[0] => val[2] }     }
    ;

  variable_identifier
    : '<' identifier '>'    {   result = val[1]   }
    ;

  variable_value
    : json_value
    ;

  json_value
    : object
    | array
    | scalar
    ;

  object
    : '{' '}'         {   result = {}       }
    | '{' pairs '}'   {   result = val[1]   }
    ;

  pairs
    : pairs ',' pair    {   result.update val[2]    }
    | pair
    ;

  pair
    : string ':' json_value   {   result = { val[0] => val[2] }    }
    ;

  array
    : '[' ']'          {   result = []       }
    | '[' values ']'   {   result = val[1]   }
    ;

  values
    : values ',' json_value   {   result.push val[2]    }
    | json_value              {   result = val          }
    ;

  scalar
    : string
    | NUMBER      {   result = convert_number(val[0])   }
    | TRUE        {   result = true                     }
    | FALSE       {   result = false                    }
    | NULL        {   result = nil                      }
    ;

  string
    : STRING

  identifier
    : IDENT       {   result = val[0].to_sym    }
    ;
end

---- header
require 'active_support/json'
require 'active_support/core_ext/object/blank'
require 'active_support/core_ext/object/try'
require 'active_support/core_ext/object/json'

require 'gql/tokenizer'

---- inner

  class Query < Struct.new(:root, :variables)
    def as_json(*)
      {
        root:       root.as_json,
        variables:  variables
      }
    end
  end

  class Root < Struct.new(:call, :fields)
    def as_json(*)
      {
        call:       call.as_json,
        fields:     fields.as_json
      }
    end
  end

  class Node < Struct.new(:id, :alias_id, :call, :fields)
    def as_json(*)
      {
        id:         id,
        alias_id:   alias_id,
        call:       call.as_json,
        fields:     fields.as_json
      }
    end
  end

  class Call < Struct.new(:id, :arguments, :call, :fields)
    def as_json(*)
      {
        id:         id,
        arguments:  arguments,
        call:       call.as_json,
        fields:     fields.as_json
      }
    end
  end

  def initialize(str)
    super()
    scan_setup str
  end

  def parse
    do_parse
  end

  def on_error(token, value, vstack)
    raise Errors::SyntaxError.new(lineno, value, token_to_str(token))
  end

  private
    def convert_number(str)
      str.count('.') > 0 ? str.to_f : str.to_i
    end
